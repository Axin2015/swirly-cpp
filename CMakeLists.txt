CMAKE_MINIMUM_REQUIRED(VERSION 3.4)
PROJECT(swirlyc)

INCLUDE(UseJava)

SET(CMAKE_VERBOSE_MAKEFILE 1)

IF(NOT CMAKE_BUILD_TYPE)
  #SET(CMAKE_BUILD_TYPE DEBUG)
  SET(CMAKE_BUILD_TYPE RELEASE)
  #SET(CMAKE_BUILD_TYPE RELWITHDEBINFO)
  #SET(CMAKE_BUILD_TYPE MINSIZEREL)
ENDIF()

STRING(TOUPPER "${CMAKE_BUILD_TYPE}" CMAKE_BUILD_TYPE)

SET(COMMON_WARN "-Wall -Werror -Wextra -Wstrict-aliasing=2 -Wno-unused-parameter")
SET(COMMON_FLAGS "-fstrict-aliasing -fvisibility=hidden")

ADD_DEFINITIONS(-DBOOST_NO_AUTO_PTR=1)
IF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
  ADD_DEFINITIONS(-D_GLIBCXX_USE_CXX11_ABI=0)
  SET(CMAKE_C_FLAGS "-std=c11 ${COMMON_FLAGS} ${COMMON_WARN}")
  SET(CMAKE_CXX_FLAGS "-std=c++14 -fno-rtti ${COMMON_FLAGS} ${COMMON_WARN}")
ELSEIF("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
  SET(CMAKE_C_FLAGS "-std=c11 ${COMMON_FLAGS} ${COMMON_WARN}")
  SET(CMAKE_CXX_FLAGS "-std=c++14 -fno-rtti -stdlib=libc++ ${COMMON_FLAGS} ${COMMON_WARN}")
ENDIF()
SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS}")

IF(CMAKE_BUILD_TYPE STREQUAL "DEBUG")
  ADD_DEFINITIONS(-DSWIRLY_DEBUG_LEVEL=1 -DSWIRLY_DEBUG_ALLOC)
ENDIF()

SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)

FILE(MAKE_DIRECTORY ${EXECUTABLE_OUTPUT_PATH})
FILE(MAKE_DIRECTORY ${LIBRARY_OUTPUT_PATH})
FILE(MAKE_DIRECTORY ${PROJECT_BINARY_DIR}/share/doc)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/etc)

FIND_JAR(PLANTUML plantuml PATHS ${PROJECT_SOURCE_DIR})
FIND_PROGRAM(DOT dot)

FIND_PACKAGE(Boost 1.58.0 REQUIRED COMPONENTS unit_test_framework)
FIND_PACKAGE(Doxygen) # Optional.

IF(DOXYGEN_FOUND)
  CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/Doxyfile.in
    ${PROJECT_BINARY_DIR}/Doxyfile)

  ADD_CUSTOM_TARGET(doc
    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
    COMMAND ${CMAKE_COMMAND} -E make_directory ${PROJECT_BINARY_DIR}/share
    COMMAND ${DOXYGEN_EXECUTABLE} ${PROJECT_BINARY_DIR}/Doxyfile
    SOURCES ${PROJECT_BINARY_DIR}/Doxyfile)

  ADD_CUSTOM_COMMAND(TARGET doc POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_SOURCE_DIR}/CNAME
            ${PROJECT_BINARY_DIR}/share/doc/html/)

  INSTALL(DIRECTORY ${PROJECT_BINARY_DIR}/share/doc/ DESTINATION share)
ENDIF()

INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/include")
INCLUDE_DIRECTORIES("${Boost_INCLUDE_DIRS}")

ENABLE_TESTING()

ADD_SUBDIRECTORY(etc)
ADD_SUBDIRECTORY(include)
ADD_SUBDIRECTORY(sql)
ADD_SUBDIRECTORY(src)

ADD_SUBDIRECTORY(example)
ADD_SUBDIRECTORY(test)
