CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(swirlyc)

INCLUDE(UseJava)

SET(CMAKE_VERBOSE_MAKEFILE 1)
OPTION(ENABLE_STATIC_LIBS ON)

IF(NOT CMAKE_BUILD_TYPE)
  #SET(CMAKE_BUILD_TYPE DEBUG)
  #SET(CMAKE_BUILD_TYPE RELEASE)
  SET(CMAKE_BUILD_TYPE RELWITHDEBINFO)
  #SET(CMAKE_BUILD_TYPE MINSIZEREL)
ENDIF()

# Enable for use with clang-tidy.
IF(NOT CMAKE_EXPORT_COMPILE_COMMANDS)
  SET(CMAKE_EXPORT_COMPILE_COMMANDS ON)
ENDIF()

STRING(TOUPPER "${CMAKE_BUILD_TYPE}" CMAKE_BUILD_TYPE)

SET(COMMON_WARN "-Wall -Werror -Wextra -Wstrict-aliasing=2 -Wno-unused-parameter -Wno-unused-variable")
SET(COMMON_FLAGS "-fstrict-aliasing -fvisibility=hidden")

IF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
  SET(CMAKE_C_FLAGS "-std=c11 ${COMMON_FLAGS} ${COMMON_WARN}")
  SET(CMAKE_CXX_FLAGS "-std=c++14 ${COMMON_FLAGS} ${COMMON_WARN}")
ELSEIF("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
  SET(CMAKE_C_FLAGS "-std=c11 ${COMMON_FLAGS} ${COMMON_WARN}")
  SET(CMAKE_CXX_FLAGS "-std=c++14 ${COMMON_FLAGS} ${COMMON_WARN}")
ENDIF()
SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS}")

ADD_DEFINITIONS(-DBOOST_NO_AUTO_PTR=1)
IF(CMAKE_BUILD_TYPE STREQUAL "DEBUG")
  ADD_DEFINITIONS(-DSWIRLY_ENABLE_DEBUG=1)
ENDIF()

SET(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin")
SET(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib")

FILE(MAKE_DIRECTORY "${EXECUTABLE_OUTPUT_PATH}")
FILE(MAKE_DIRECTORY "${LIBRARY_OUTPUT_PATH}")
FILE(MAKE_DIRECTORY "${PROJECT_BINARY_DIR}/share/doc/html")

SET(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH}" "${PROJECT_SOURCE_DIR}/etc")

FIND_JAR(PLANTUML plantuml PATHS "${PROJECT_SOURCE_DIR}")
FIND_PROGRAM(DOT_EXECUTABLE dot)
FIND_PROGRAM(ENV_EXECUTABLE env)
FIND_PROGRAM(RAGEL_EXECUTABLE ragel)

FIND_PACKAGE(Boost 1.55 REQUIRED COMPONENTS date_time filesystem program_options
  system unit_test_framework)
FIND_PACKAGE(Doxygen)      # Optional.
FIND_PACKAGE(Perl)         # Optional.
FIND_PACKAGE(PythonInterp) # Optional.

IF(DOXYGEN_FOUND)

  CONFIGURE_FILE("${PROJECT_SOURCE_DIR}/Doxyfile.in"
    "${PROJECT_BINARY_DIR}/Doxyfile")

  ADD_CUSTOM_TARGET(doc
    WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}"
    COMMAND "${CMAKE_COMMAND}" -E make_directory "${PROJECT_BINARY_DIR}/share"
    COMMAND "${DOXYGEN_EXECUTABLE}" "${PROJECT_BINARY_DIR}/Doxyfile"
    SOURCES "${PROJECT_BINARY_DIR}/Doxyfile")

  ADD_CUSTOM_COMMAND(TARGET doc POST_BUILD
    COMMAND "${CMAKE_COMMAND}" -E copy "${PROJECT_SOURCE_DIR}/CNAME"
            "${PROJECT_BINARY_DIR}/share/doc/html/")
  ADD_DEPENDENCIES(doc image)

  INSTALL(DIRECTORY "${PROJECT_BINARY_DIR}/share/doc/" DESTINATION share)
ENDIF()

INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/include")
INCLUDE_DIRECTORIES("${Boost_INCLUDE_DIRS}")

ENABLE_TESTING()

ADD_SUBDIRECTORY(etc)
ADD_SUBDIRECTORY(image)
ADD_SUBDIRECTORY(include)
ADD_SUBDIRECTORY(src)

ADD_SUBDIRECTORY(test)
